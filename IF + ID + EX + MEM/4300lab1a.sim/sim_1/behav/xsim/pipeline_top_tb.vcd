$date
   Thu May  8 21:21:22 2025
$end

$version
  2023.2
  $dumpfile ("pipeline_top_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module pipeline_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var wire 32 # current_pc [31:0] $end
$var wire 32 $ if_id_ir [31:0] $end
$var wire 32 % if_id_npc [31:0] $end
$var wire 32 & id_ex_npc [31:0] $end
$var wire 32 ' regData1 [31:0] $end
$var wire 32 ( regData2 [31:0] $end
$var wire 32 ) signExt [31:0] $end
$var wire 5 * rt [4:0] $end
$var wire 5 + rd [4:0] $end
$var wire 9 , control [8:0] $end
$var wire 32 - ex_mem_pc_branch [31:0] $end
$var wire 1 . ex_mem_zero $end
$var wire 32 / ex_mem_alu_result [31:0] $end
$var wire 32 0 ex_mem_write_data [31:0] $end
$var wire 5 1 ex_mem_write_reg [4:0] $end
$var wire 32 2 mem_wb_alu_result [31:0] $end
$var wire 32 3 mem_wb_mem_read_data [31:0] $end
$var wire 5 4 mem_wb_write_reg [4:0] $end
$var wire 2 5 mem_wb_wb_ctl [1:0] $end
$scope module dut $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 # current_pc [31:0] $end
$var wire 32 $ if_id_ir [31:0] $end
$var wire 32 % if_id_npc [31:0] $end
$var wire 32 & id_ex_npc [31:0] $end
$var wire 32 ' regData1 [31:0] $end
$var wire 32 ( regData2 [31:0] $end
$var wire 32 ) signExt [31:0] $end
$var wire 5 * rt [4:0] $end
$var wire 5 + rd [4:0] $end
$var wire 9 , control [8:0] $end
$var wire 32 - ex_mem_pc_branch [31:0] $end
$var wire 1 . ex_mem_zero $end
$var wire 32 / ex_mem_alu_result [31:0] $end
$var wire 32 0 ex_mem_write_data [31:0] $end
$var wire 5 1 ex_mem_write_reg [4:0] $end
$var wire 32 2 mem_wb_alu_result [31:0] $end
$var wire 32 3 mem_wb_mem_read_data [31:0] $end
$var wire 5 4 mem_wb_write_reg [4:0] $end
$var wire 1 8 PCSrc $end
$var wire 32 9 branch_target [31:0] $end
$var wire 32 : instr [31:0] $end
$var wire 32 ; npc [31:0] $end
$var wire 2 < wb_ctl [1:0] $end
$var wire 3 = m_ctl [2:0] $end
$var wire 2 > ex_ctl [1:0] $end
$var wire 1 ? id_ex_alu_src $end
$var wire 1 @ id_ex_reg_dst $end
$var wire 2 A ex_mem_wb_ctl [1:0] $end
$var wire 3 B ex_mem_m_ctl [2:0] $end
$var wire 2 C mem_wb_wb_ctl [1:0] $end
$scope module IF_STAGE $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 1 8 PCSrc $end
$var wire 32 9 branch_target [31:0] $end
$var wire 32 # current_pc [31:0] $end
$var wire 32 : if_id_ir [31:0] $end
$var wire 32 ; if_id_npc [31:0] $end
$var wire 32 D pc_next [31:0] $end
$var wire 32 E pc_current [31:0] $end
$var wire 32 F npc_candidate [31:0] $end
$var wire 32 G instruction [31:0] $end
$scope module PC $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 D next_pc [31:0] $end
$var reg 32 H pc [31:0] $end
$upscope $end
$scope module INCR $end
$var wire 32 E in [31:0] $end
$var wire 32 F out [31:0] $end
$upscope $end
$scope module MUX $end
$var wire 32 F a [31:0] $end
$var wire 32 9 b [31:0] $end
$var wire 1 8 sel $end
$var wire 32 D y [31:0] $end
$upscope $end
$scope module IM $end
$var wire 7 I addr [8:2] $end
$var wire 32 G instruction [31:0] $end
$var integer 32 J i [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 F npc_in [31:0] $end
$var wire 32 G ir_in [31:0] $end
$var reg 32 K npc_out [31:0] $end
$var reg 32 L ir_out [31:0] $end
$upscope $end
$upscope $end
$scope module ID_STAGE $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 ; npc [31:0] $end
$var wire 32 : instr [31:0] $end
$var wire 32 & id_ex_npc [31:0] $end
$var wire 32 ' regData1 [31:0] $end
$var wire 32 ( regData2 [31:0] $end
$var wire 32 ) signExt [31:0] $end
$var wire 5 * rt [4:0] $end
$var wire 5 + rd [4:0] $end
$var wire 9 , control [8:0] $end
$var wire 6 M opcode [5:0] $end
$var wire 5 N rs [4:0] $end
$var wire 5 O rt_field [4:0] $end
$var wire 5 P rd_field [4:0] $end
$var wire 16 Q immediate [15:0] $end
$var wire 9 R control_signals [8:0] $end
$var wire 32 S readData1 [31:0] $end
$var wire 32 T readData2 [31:0] $end
$var wire 32 U imm_ext [31:0] $end
$scope module CU $end
$var wire 6 M opcode [5:0] $end
$var reg 9 V control [8:0] $end
$upscope $end
$scope module RF $end
$var wire 1 6 clk $end
$var wire 1 W regWrite $end
$var wire 5 N readReg1 [4:0] $end
$var wire 5 O readReg2 [4:0] $end
$var wire 5 X writeReg [4:0] $end
$var wire 32 Y writeData [31:0] $end
$var wire 32 S readData1 [31:0] $end
$var wire 32 T readData2 [31:0] $end
$var integer 32 Z i [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 Q imm [15:0] $end
$var wire 32 U imm_ext [31:0] $end
$upscope $end
$scope module ID_EX $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 32 ; npc_in [31:0] $end
$var wire 32 S regData1_in [31:0] $end
$var wire 32 T regData2_in [31:0] $end
$var wire 32 U signExt_in [31:0] $end
$var wire 5 O rt_in [4:0] $end
$var wire 5 P rd_in [4:0] $end
$var wire 9 R control_in [8:0] $end
$var reg 32 [ npc_out [31:0] $end
$var reg 32 \ regData1_out [31:0] $end
$var reg 32 ] regData2_out [31:0] $end
$var reg 32 ^ signExt_out [31:0] $end
$var reg 5 _ rt_out [4:0] $end
$var reg 5 ` rd_out [4:0] $end
$var reg 9 a control_out [8:0] $end
$upscope $end
$upscope $end
$scope module EX_STAGE $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 2 > id_ex_alu_op [1:0] $end
$var wire 1 ? id_ex_alu_src $end
$var wire 1 @ id_ex_reg_dst $end
$var wire 32 & id_ex_pc_add4 [31:0] $end
$var wire 32 ' id_ex_read_data1 [31:0] $end
$var wire 32 ( id_ex_read_data2 [31:0] $end
$var wire 32 ) id_ex_sign_ext [31:0] $end
$var wire 5 * id_ex_rt [4:0] $end
$var wire 5 + id_ex_rd [4:0] $end
$var wire 6 b id_ex_funct [5:0] $end
$var wire 2 < id_ex_wb_ctl [1:0] $end
$var wire 3 = id_ex_m_ctl [2:0] $end
$var wire 2 A ex_mem_wb_ctl [1:0] $end
$var wire 3 B ex_mem_m_ctl [2:0] $end
$var wire 32 - ex_mem_pc_branch [31:0] $end
$var wire 1 . ex_mem_zero $end
$var wire 32 / ex_mem_alu_result [31:0] $end
$var wire 32 0 ex_mem_write_data [31:0] $end
$var wire 5 1 ex_mem_write_reg [4:0] $end
$var wire 3 c alu_ctl_signal [2:0] $end
$var wire 32 d alu_operand_b [31:0] $end
$var wire 32 e alu_result [31:0] $end
$var wire 1 f alu_zero $end
$var wire 5 g dest_reg [4:0] $end
$var wire 32 h branch_target [31:0] $end
$scope module alu_ctrl $end
$var wire 2 > alu_op [1:0] $end
$var wire 6 b funct [5:0] $end
$var reg 3 i alu_control [2:0] $end
$upscope $end
$scope module mux_alu_src $end
$var wire 32 ( a [31:0] $end
$var wire 32 ) b [31:0] $end
$var wire 1 ? sel $end
$var wire 32 d y [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 ' a [31:0] $end
$var wire 32 d b [31:0] $end
$var wire 3 c alu_control [2:0] $end
$var reg 32 j result [31:0] $end
$var wire 1 f zero $end
$upscope $end
$scope module mux_reg_dst $end
$var wire 5 * a [4:0] $end
$var wire 5 + b [4:0] $end
$var wire 1 @ sel $end
$var wire 5 g y [4:0] $end
$upscope $end
$scope module EX_MEM $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 2 < ex_mem_wb_ctl_in [1:0] $end
$var wire 3 = ex_mem_m_ctl_in [2:0] $end
$var wire 32 h ex_mem_pc_branch_in [31:0] $end
$var wire 1 f ex_mem_zero_in $end
$var wire 32 e ex_mem_alu_result_in [31:0] $end
$var wire 32 ( ex_mem_write_data_in [31:0] $end
$var wire 5 g ex_mem_write_reg_in [4:0] $end
$var reg 2 k ex_mem_wb_ctl_out [1:0] $end
$var reg 3 l ex_mem_m_ctl_out [2:0] $end
$var reg 32 m ex_mem_pc_branch_out [31:0] $end
$var reg 1 n ex_mem_zero_out $end
$var reg 32 o ex_mem_alu_result_out [31:0] $end
$var reg 32 p ex_mem_write_data_out [31:0] $end
$var reg 5 q ex_mem_write_reg_out [4:0] $end
$upscope $end
$upscope $end
$scope module MEM_STAGE $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 2 A ex_mem_wb_ctl [1:0] $end
$var wire 3 B ex_mem_m_ctl [2:0] $end
$var wire 1 . ex_mem_zero $end
$var wire 32 / ex_mem_alu_result [31:0] $end
$var wire 32 0 ex_mem_write_data [31:0] $end
$var wire 5 1 ex_mem_write_reg [4:0] $end
$var wire 32 - ex_mem_pc_branch [31:0] $end
$var wire 1 8 PCSrc $end
$var wire 32 9 branch_target [31:0] $end
$var wire 2 C mem_wb_wb_ctl [1:0] $end
$var wire 32 2 mem_wb_alu_result [31:0] $end
$var wire 32 3 mem_wb_mem_read_data [31:0] $end
$var wire 5 4 mem_wb_write_reg [4:0] $end
$var wire 1 r branch $end
$var wire 1 s memread $end
$var wire 1 t memwrite $end
$var wire 1 u zero $end
$var wire 32 v read_data [31:0] $end
$scope module branch_and $end
$var wire 1 r a $end
$var wire 1 u b $end
$var wire 1 8 y $end
$upscope $end
$scope module data_mem_block $end
$var wire 1 6 clk $end
$var wire 1 s memread $end
$var wire 1 t memwrite $end
$var wire 32 / addr [31:0] $end
$var wire 32 0 writedata [31:0] $end
$var reg 32 w readdata [31:0] $end
$var integer 32 x i [31:0] $end
$upscope $end
$scope module mem_wb_latch $end
$var wire 1 6 clk $end
$var wire 1 7 reset $end
$var wire 2 A mem_wb_wb_ctl_in [1:0] $end
$var wire 32 / mem_wb_alu_result_in [31:0] $end
$var wire 32 v mem_wb_mem_read_data_in [31:0] $end
$var wire 5 1 mem_wb_write_reg_in [4:0] $end
$var reg 2 y mem_wb_wb_ctl_out [1:0] $end
$var reg 32 z mem_wb_alu_result_out [31:0] $end
$var reg 32 { mem_wb_mem_read_data_out [31:0] $end
$var reg 5 | mem_wb_write_reg_out [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
1"
b0 #
b0 $
b0 %
b0 &
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
b0 -
0.
b0 /
b0 0
b0 1
b0 2
b0 3
b0 4
b0 5
06
17
08
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 >
0?
0@
b0 A
b0 B
b0 C
b100 D
b0 E
b100 F
b1000110000000010101010 G
b0 H
b0 I
b10000000 J
b0 K
b0 L
b0 M
b0 N
b0 O
b0 P
b0 Q
b100001100 R
b0 S
b0 T
b0 U
b100001100 V
0W
b0 X
b0 Y
b100000 Z
b0 [
b0 \
b0 ]
b0 ^
b0 _
b0 `
b0 a
b0 b
b10 c
b0 d
b0 e
1f
b0 g
b0 h
b10 i
b0 j
b0 k
b0 l
b0 m
0n
b0 o
b0 p
b0 q
0r
0s
0t
0u
b0 v
b0 w
b10000000 x
b0 y
b0 z
b0 {
b0 |
$end

#5000
1!
16

#10000
0!
0"
06
07

#15000
1!
b100 #
b1000110000000010101010 $
b1000 %
b100001100 ,
1.
b10 5
16
b1000110000000010101010 :
b1000 ;
b10 <
b11 >
b1000 D
b100 E
b1000 F
b10000011001010100001100100001 G
b100 H
b1 I
b1000 K
b1000110000000010101010 L
b1 N
b11 O
b10101010 Q
b1 S
b11 T
b10101010 U
b100001100 a
b101010 b
1n
1u

#20000
0!
06

#25000
1!
b1000 #
b10000011001010100001100100001 $
b1100 %
b1000 &
b1 '
b11 (
b10101010 )
b11 *
16
b10000011001010100001100100001 :
b1100 ;
b10 A
b1100 D
b1000 E
b1100 F
b100000000000000100010 G
b1000 H
b10 I
b1100 K
b10000011001010100001100100001 L
b100 M
b11 N
b101 O
b1000 P
b100001100100001 Q
b1000100 R
b11 S
b101 T
b100001100100001 U
b1000100 V
b1000 [
b1 \
b11 ]
b10101010 ^
b11 _
b100001 b
b11 d
b100 e
0f
b11 g
b10110010 h
b100 j
b10 k

#30000
0!
06

#35000
1!
b1100 #
b100000000000000100010 $
b10000 %
b1100 &
b11 '
b101 (
b100001100100001 )
b101 *
b1000 +
b1000100 ,
b10110010 -
0.
b100 /
b11 0
b11 1
b0 5
16
b10110010 9
b100000000000000100010 :
b10000 ;
b0 <
b100 =
b1 >
b10 C
b10000 D
b1100 E
b10000 F
b10001100000100100011010001010110 G
b1100 H
b11 I
b10000 K
b100000000000000100010 L
b0 M
b0 N
b10000 O
b0 P
b100010 Q
b100001100 R
b0 S
b10000 T
b100010 U
b100001100 V
b1100 [
b11 \
b101 ]
b100001100100001 ^
b101 _
b1000 `
b1000100 a
b100010 b
b110 c
b101 d
b11111111111111111111111111111110 e
b101 g
b100001100101101 h
b110 i
b11111111111111111111111111111110 j
b10110010 m
0n
b100 o
b11 p
b11 q
0u
b10 y

#40000
0!
06

#45000
1!
b10000 #
b10001100000100100011010001010110 $
b10100 %
b10000 &
b0 '
b10000 (
b100010 )
b10000 *
b0 +
b100001100 ,
b100001100101101 -
b11111111111111111111111111111110 /
b101 0
b101 1
b100 2
b11 4
b10 5
16
b100001100101101 9
b10001100000100100011010001010110 :
b10100 ;
b10 <
b0 =
b11 >
b0 A
b100 B
b10100 D
b10000 E
b10100 F
b10001111000100100011010001010110 G
b10000 H
b100 I
b10100 K
b10001100000100100011010001010110 L
b100011 M
b10010 O
b110 P
b11010001010110 Q
b110100001 R
b10010 T
b11010001010110 U
b110100001 V
b10000 [
b0 \
b10000 ]
b100010 ^
b10000 _
b0 `
b100001100 a
b10110 b
b10 c
b10000 d
b10000 e
b10000 g
b110010 h
b10 i
b10000 j
b0 k
b100 l
b100001100101101 m
b11111111111111111111111111111110 o
b101 p
b101 q
1r
b100 z
b11 |

#50000
0!
06

#55000
1!
b10100 #
b10001111000100100011010001010110 $
b11000 %
b10100 &
b10010 (
b11010001010110 )
b10010 *
b110 +
b110100001 ,
b110010 -
b10000 /
b10000 0
b10000 1
b11111111111111111111111111111110 2
b101 4
b11 5
16
b110010 9
b10001111000100100011010001010110 :
b11000 ;
b11 <
b10 =
b0 >
1?
b10 A
b0 B
b0 C
b11000 D
b10100 E
b11000 F
b10101101011001010100001100100001 G
b10100 H
b101 I
b11000 K
b10001111000100100011010001010110 L
b11000 N
b11000 S
b10100 [
b10010 ]
b11010001010110 ^
b10010 _
b110 `
b110100001 a
b10110 b
b11010001010110 d
b11010001010110 e
b10010 g
b11010001101010 h
b11010001010110 j
b10 k
b0 l
b110010 m
b10000 o
b10000 p
b10000 q
0r
b0 y
b11111111111111111111111111111110 z
b101 |

#60000
0!
06

#65000
1!
b11000 #
b10101101011001010100001100100001 $
b11100 %
b11000 &
b11000 '
b11010001101010 -
b11010001010110 /
b10010 0
b10010 1
b10000 2
b10000 4
16
b11010001101010 9
b10101101011001010100001100100001 :
b11100 ;
b11 A
b10 B
b10 C
b11100 D
b11000 E
b11100 F
b10011000000010010001101000101 G
b11000 H
b110 I
b11100 K
b10101101011001010100001100100001 L
b101011 M
b1011 N
b101 O
b1000 P
b100001100100001 Q
b10001 R
b1011 S
b101 T
b100001100100001 U
b10001 V
b11000 [
b11000 \
b100001 b
b11010001101110 e
b11010001101110 h
b11010001101110 j
b11 k
b10 l
b11010001101010 m
b11010001010110 o
b10010 p
b10010 q
1s
b10001100000100100011010001010110 v
b10001100000100100011010001010110 w
b10 y
b10000 z
b10000 |

#70000
0!
06

#75000
1!
b11100 #
b10011000000010010001101000101 $
b100000 %
b11100 &
b1011 '
b101 (
b100001100100001 )
b101 *
b1000 +
b10001 ,
b11010001101110 -
b11010001101110 /
b11010001010110 2
b10001100000100100011010001010110 3
b10010 4
b0 5
16
b11010001101110 9
b10011000000010010001101000101 :
b100000 ;
b0 <
b1 =
b11 C
b100000 D
b11100 E
b100000 F
b10101100011001010100001100100001 G
b11100 H
b111 I
b100000 K
b10011000000010010001101000101 L
b100 M
b11000 N
b1 O
b100 P
b10001101000101 Q
b1000100 R
b11000 S
b1 T
b10001101000101 U
b1000100 V
b11100 [
b1011 \
b101 ]
b100001100100001 ^
b101 _
b1000 `
b10001 a
b101 b
b100001100100001 d
b100001100101100 e
b101 g
b100001100111101 h
b100001100101100 j
b11010001101110 m
b11010001101110 o
b1000110000000010101010 v
b1000110000000010101010 w
b11 y
b11010001010110 z
b10001100000100100011010001010110 {
b10010 |

#80000
0!
06

#85000
1!
b100000 #
b10101100011001010100001100100001 $
b100100 %
b100000 &
b11000 '
b1 (
b10001101000101 )
b1 *
b100 +
b1000100 ,
b100001100111101 -
b100001100101100 /
b101 0
b101 1
b11010001101110 2
b1000110000000010101010 3
16
b100001100111101 9
b10101100011001010100001100100001 :
b100100 ;
b100 =
b1 >
0?
b0 A
b1 B
b100100 D
b100000 E
b100100 F
b10010000000010010001101000101 G
b100000 H
b1000 I
b100100 K
b10101100011001010100001100100001 L
b101011 M
b11 N
b101 O
b1000 P
b100001100100001 Q
b10001 R
b11 S
b101 T
b100001100100001 U
b10001 V
b100000 [
b11000 \
b1 ]
b10001101000101 ^
b1 _
b100 `
b1000100 a
b100001 b
b110 c
b1 d
b10111 e
b1 g
b10001101100101 h
b110 i
b10111 j
b0 k
b1 l
b100001100111101 m
b100001100101100 o
b101 p
b101 q
0s
1t
b0 v
b0 w
b11010001101110 z
b1000110000000010101010 {

#90000
0!
06

#95000
1!
b100100 #
b10010000000010010001101000101 $
b101000 %
b100100 &
b11 '
b101 (
b100001100100001 )
b101 *
b1000 +
b10001 ,
b10001101100101 -
b10111 /
b1 0
b1 1
b100001100101100 2
b0 3
b101 4
16
b10001101100101 9
b10010000000010010001101000101 :
b101000 ;
b1 =
b0 >
1?
b100 B
b0 C
b101000 D
b100100 E
b101000 F
b0 G
b100100 H
b1001 I
b101000 K
b10010000000010010001101000101 L
b100 M
b10000 N
b1 O
b100 P
b10001101000101 Q
b1000100 R
b10000 S
b1 T
b10001101000101 U
b1000100 V
b100100 [
b11 \
b101 ]
b100001100100001 ^
b101 _
b1000 `
b10001 a
b101 b
b10 c
b100001100100001 d
b100001100100100 e
b101 g
b100001101000101 h
b10 i
b100001100100100 j
b100 l
b10001101100101 m
b10111 o
b1 p
b1 q
1r
0t
b0 y
b100001100101100 z
b0 {
b101 |

#100000
0!
06

#105000
1!
b101000 #
b0 $
b101100 %
b101000 &
b10000 '
b1 (
b10001101000101 )
b1 *
b100 +
b1000100 ,
b100001101000101 -
b100001100100100 /
b101 0
b101 1
b10111 2
b1 4
16
b100001101000101 9
b0 :
b101100 ;
b100 =
b1 >
0?
b1 B
b101100 D
b101000 E
b101100 F
b101000 H
b1010 I
b101100 K
b0 L
b0 M
b0 N
b0 O
b0 P
b0 Q
b100001100 R
b0 S
b0 T
b0 U
b100001100 V
b101000 [
b10000 \
b1 ]
b10001101000101 ^
b1 _
b100 `
b1000100 a
b0 b
b110 c
b1 d
b1111 e
b1 g
b10001101101101 h
b110 i
b1111 j
b1 l
b100001101000101 m
b100001100100100 o
b101 p
b101 q
0r
1t
b10111 z
b1 |

#110000
0!
06

#115000
1!
b101100 #
b110000 %
b101100 &
b0 '
b0 (
b0 )
b0 *
b0 +
b100001100 ,
b10001101101101 -
b1111 /
b1 0
b1 1
b100001100100100 2
b101 4
b10 5
16
b10001101101101 9
b110000 ;
b10 <
b0 =
b11 >
b100 B
b110000 D
b101100 E
b110000 F
b101100 H
b1011 I
b110000 K
b101100 [
b0 \
b0 ]
b0 ^
b0 _
b0 `
b100001100 a
b10 c
b0 d
b0 e
1f
b0 g
b101100 h
b10 i
b0 j
b100 l
b10001101101101 m
b1111 o
b1 p
b1 q
1r
0t
b100001100100100 z
b101 |

#120000
0!
06

#125000
1!
b110000 #
b110100 %
b110000 &
b101100 -
1.
b0 /
b0 0
b0 1
b1111 2
b1 4
16
b101100 9
b110100 ;
b10 A
b0 B
b110100 D
b110000 E
b110100 F
b110000 H
b1100 I
b110100 K
b110000 [
b110000 h
b10 k
b0 l
b101100 m
1n
b0 o
b0 p
b0 q
0r
1u
b1111 z
b1 |

#130000
0!
06

#135000
1!
b110100 #
b111000 %
b110100 &
b110000 -
b0 2
b0 4
16
b110000 9
b111000 ;
b10 C
b111000 D
b110100 E
b111000 F
b110100 H
b1101 I
b111000 K
b110100 [
b110100 h
b110000 m
b10 y
b0 z
b0 |

#140000
0!
06

#145000
1!
b111000 #
b111100 %
b111000 &
b110100 -
16
b110100 9
b111100 ;
b111100 D
b111000 E
b111100 F
b111000 H
b1110 I
b111100 K
b111000 [
b111000 h
b110100 m

#150000
0!
06

#155000
1!
b111100 #
b1000000 %
b111100 &
b111000 -
16
b111000 9
b1000000 ;
b1000000 D
b111100 E
b1000000 F
b111100 H
b1111 I
b1000000 K
b111100 [
b111100 h
b111000 m

#160000
0!
06

#165000
1!
b1000000 #
b1000100 %
b1000000 &
b111100 -
16
b111100 9
b1000100 ;
b1000100 D
b1000000 E
b1000100 F
b1000000 H
b10000 I
b1000100 K
b1000000 [
b1000000 h
b111100 m

#170000
0!
06

#175000
1!
b1000100 #
b1001000 %
b1000100 &
b1000000 -
16
b1000000 9
b1001000 ;
b1001000 D
b1000100 E
b1001000 F
b1000100 H
b10001 I
b1001000 K
b1000100 [
b1000100 h
b1000000 m

#180000
0!
06

#185000
1!
b1001000 #
b1001100 %
b1001000 &
b1000100 -
16
b1000100 9
b1001100 ;
b1001100 D
b1001000 E
b1001100 F
b1001000 H
b10010 I
b1001100 K
b1001000 [
b1001000 h
b1000100 m

#190000
0!
06

#195000
1!
b1001100 #
b1010000 %
b1001100 &
b1001000 -
16
b1001000 9
b1010000 ;
b1010000 D
b1001100 E
b1010000 F
b1001100 H
b10011 I
b1010000 K
b1001100 [
b1001100 h
b1001000 m

#200000
0!
06

#205000
1!
b1010000 #
b1010100 %
b1010000 &
b1001100 -
16
b1001100 9
b1010100 ;
b1010100 D
b1010000 E
b1010100 F
b1010000 H
b10100 I
b1010100 K
b1010000 [
b1010000 h
b1001100 m
